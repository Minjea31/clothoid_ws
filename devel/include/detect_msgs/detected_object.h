// Generated by gencpp from file detect_msgs/detected_object.msg
// DO NOT EDIT!


#ifndef DETECT_MSGS_MESSAGE_DETECTED_OBJECT_H
#define DETECT_MSGS_MESSAGE_DETECTED_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace detect_msgs
{
template <class ContainerAllocator>
struct detected_object_
{
  typedef detected_object_<ContainerAllocator> Type;

  detected_object_()
    : id(0)
    , world_point()  {
    }
  detected_object_(const ContainerAllocator& _alloc)
    : id(0)
    , world_point(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _world_point_type;
  _world_point_type world_point;





  typedef boost::shared_ptr< ::detect_msgs::detected_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_msgs::detected_object_<ContainerAllocator> const> ConstPtr;

}; // struct detected_object_

typedef ::detect_msgs::detected_object_<std::allocator<void> > detected_object;

typedef boost::shared_ptr< ::detect_msgs::detected_object > detected_objectPtr;
typedef boost::shared_ptr< ::detect_msgs::detected_object const> detected_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_msgs::detected_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_msgs::detected_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detect_msgs::detected_object_<ContainerAllocator1> & lhs, const ::detect_msgs::detected_object_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.world_point == rhs.world_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detect_msgs::detected_object_<ContainerAllocator1> & lhs, const ::detect_msgs::detected_object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detect_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detect_msgs::detected_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_msgs::detected_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_msgs::detected_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_msgs::detected_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_msgs::detected_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_msgs::detected_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_msgs::detected_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a614a22096bf2e77defb774f827e23b";
  }

  static const char* value(const ::detect_msgs::detected_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a614a22096bf2e7ULL;
  static const uint64_t static_value2 = 0x7defb774f827e23bULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_msgs::detected_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_msgs/detected_object";
  }

  static const char* value(const ::detect_msgs::detected_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_msgs::detected_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id\n"
"geometry_msgs/Pose world_point\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::detect_msgs::detected_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_msgs::detected_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.world_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detected_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_msgs::detected_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_msgs::detected_object_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "world_point: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.world_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_MSGS_MESSAGE_DETECTED_OBJECT_H
