//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the detect_ws package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __detect_ws__LIDARCLUSTERINGCONFIG_H__
#define __detect_ws__LIDARCLUSTERINGCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace detect_ws
{
  class LidarClusteringConfigStatics;

  class LidarClusteringConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(LidarClusteringConfig &config, const LidarClusteringConfig &max, const LidarClusteringConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const LidarClusteringConfig &config1, const LidarClusteringConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, LidarClusteringConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const LidarClusteringConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LidarClusteringConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const LidarClusteringConfig &config) const = 0;
      virtual void getValue(const LidarClusteringConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T LidarClusteringConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T LidarClusteringConfig::* field;

      virtual void clamp(LidarClusteringConfig &config, const LidarClusteringConfig &max, const LidarClusteringConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const LidarClusteringConfig &config1, const LidarClusteringConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, LidarClusteringConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const LidarClusteringConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LidarClusteringConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const LidarClusteringConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const LidarClusteringConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, LidarClusteringConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, LidarClusteringConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<LidarClusteringConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(LidarClusteringConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PITCH_DEG"==(*_i)->name){PITCH_DEG = boost::any_cast<double>(val);}
        if("ROI_X_MIN"==(*_i)->name){ROI_X_MIN = boost::any_cast<double>(val);}
        if("ROI_X_MAX"==(*_i)->name){ROI_X_MAX = boost::any_cast<double>(val);}
        if("ROI_Y_MIN"==(*_i)->name){ROI_Y_MIN = boost::any_cast<double>(val);}
        if("ROI_Y_MAX"==(*_i)->name){ROI_Y_MAX = boost::any_cast<double>(val);}
        if("ROI_Z_MIN"==(*_i)->name){ROI_Z_MIN = boost::any_cast<double>(val);}
        if("ROI_Z_MAX"==(*_i)->name){ROI_Z_MAX = boost::any_cast<double>(val);}
        if("VOXEL_SIZE"==(*_i)->name){VOXEL_SIZE = boost::any_cast<double>(val);}
        if("DROR_MIN_NEIGHBORS"==(*_i)->name){DROR_MIN_NEIGHBORS = boost::any_cast<int>(val);}
        if("DROR_MIN_RADIUS"==(*_i)->name){DROR_MIN_RADIUS = boost::any_cast<double>(val);}
        if("DROR_RADIUS_SCALE"==(*_i)->name){DROR_RADIUS_SCALE = boost::any_cast<double>(val);}
        if("DROR_MAX_RADIUS"==(*_i)->name){DROR_MAX_RADIUS = boost::any_cast<double>(val);}
        if("GROUND_THRESH"==(*_i)->name){GROUND_THRESH = boost::any_cast<double>(val);}
        if("EUCLIDEAN_CLUSTER_DIST"==(*_i)->name){EUCLIDEAN_CLUSTER_DIST = boost::any_cast<double>(val);}
        if("EUCLIDEAN_MIN_CLUSTER_SIZE"==(*_i)->name){EUCLIDEAN_MIN_CLUSTER_SIZE = boost::any_cast<int>(val);}
        if("CLUSTER_MERGE_GAP"==(*_i)->name){CLUSTER_MERGE_GAP = boost::any_cast<double>(val);}
        if("MAX_LENGTH"==(*_i)->name){MAX_LENGTH = boost::any_cast<double>(val);}
        if("MAX_WIDTH"==(*_i)->name){MAX_WIDTH = boost::any_cast<double>(val);}
        if("MAX_HEIGHT"==(*_i)->name){MAX_HEIGHT = boost::any_cast<double>(val);}
        if("MIN_LENGTH"==(*_i)->name){MIN_LENGTH = boost::any_cast<double>(val);}
        if("MIN_WIDTH"==(*_i)->name){MIN_WIDTH = boost::any_cast<double>(val);}
        if("MIN_HEIGHT"==(*_i)->name){MIN_HEIGHT = boost::any_cast<double>(val);}
        if("TRACKER_MAX_MISS"==(*_i)->name){TRACKER_MAX_MISS = boost::any_cast<int>(val);}
        if("MATCH_DIST"==(*_i)->name){MATCH_DIST = boost::any_cast<double>(val);}
        if("EUCLIDEAN_BASE_DIST"==(*_i)->name){EUCLIDEAN_BASE_DIST = boost::any_cast<double>(val);}
        if("EUCLIDEAN_DIST_SCALE"==(*_i)->name){EUCLIDEAN_DIST_SCALE = boost::any_cast<double>(val);}
      }
    }

    double PITCH_DEG;
double ROI_X_MIN;
double ROI_X_MAX;
double ROI_Y_MIN;
double ROI_Y_MAX;
double ROI_Z_MIN;
double ROI_Z_MAX;
double VOXEL_SIZE;
int DROR_MIN_NEIGHBORS;
double DROR_MIN_RADIUS;
double DROR_RADIUS_SCALE;
double DROR_MAX_RADIUS;
double GROUND_THRESH;
double EUCLIDEAN_CLUSTER_DIST;
int EUCLIDEAN_MIN_CLUSTER_SIZE;
double CLUSTER_MERGE_GAP;
double MAX_LENGTH;
double MAX_WIDTH;
double MAX_HEIGHT;
double MIN_LENGTH;
double MIN_WIDTH;
double MIN_HEIGHT;
int TRACKER_MAX_MISS;
double MATCH_DIST;
double EUCLIDEAN_BASE_DIST;
double EUCLIDEAN_DIST_SCALE;

    bool state;
    std::string name;

    
}groups;



//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double PITCH_DEG;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_X_MIN;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_X_MAX;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_Y_MIN;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_Y_MAX;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_Z_MIN;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ROI_Z_MAX;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double VOXEL_SIZE;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int DROR_MIN_NEIGHBORS;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double DROR_MIN_RADIUS;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double DROR_RADIUS_SCALE;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double DROR_MAX_RADIUS;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double GROUND_THRESH;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double EUCLIDEAN_CLUSTER_DIST;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int EUCLIDEAN_MIN_CLUSTER_SIZE;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double CLUSTER_MERGE_GAP;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MAX_LENGTH;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MAX_WIDTH;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MAX_HEIGHT;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MIN_LENGTH;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MIN_WIDTH;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MIN_HEIGHT;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int TRACKER_MAX_MISS;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double MATCH_DIST;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double EUCLIDEAN_BASE_DIST;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double EUCLIDEAN_DIST_SCALE;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("LidarClusteringConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (size_t i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (size_t i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (size_t i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (size_t i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const LidarClusteringConfig &__max__ = __getMax__();
      const LidarClusteringConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const LidarClusteringConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const LidarClusteringConfig &__getDefault__();
    static const LidarClusteringConfig &__getMax__();
    static const LidarClusteringConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const LidarClusteringConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void LidarClusteringConfig::ParamDescription<std::string>::clamp(LidarClusteringConfig &config, const LidarClusteringConfig &max, const LidarClusteringConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class LidarClusteringConfigStatics
  {
    friend class LidarClusteringConfig;

    LidarClusteringConfigStatics()
    {
LidarClusteringConfig::GroupDescription<LidarClusteringConfig::DEFAULT, LidarClusteringConfig> Default("Default", "", 0, 0, true, &LidarClusteringConfig::groups);
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.PITCH_DEG = -10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.PITCH_DEG = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.PITCH_DEG = 3.3;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("PITCH_DEG", "double", 0, "센서 pitch(deg)", "", &LidarClusteringConfig::PITCH_DEG)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("PITCH_DEG", "double", 0, "센서 pitch(deg)", "", &LidarClusteringConfig::PITCH_DEG)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_X_MIN = -30.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_X_MIN = 30.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_X_MIN = 0.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_X_MIN", "double", 0, "ROI_X_MIN", "", &LidarClusteringConfig::ROI_X_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_X_MIN", "double", 0, "ROI_X_MIN", "", &LidarClusteringConfig::ROI_X_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_X_MAX = -30.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_X_MAX = 30.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_X_MAX = 15.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_X_MAX", "double", 0, "ROI_X_MAX", "", &LidarClusteringConfig::ROI_X_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_X_MAX", "double", 0, "ROI_X_MAX", "", &LidarClusteringConfig::ROI_X_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_Y_MIN = -10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_Y_MIN = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_Y_MIN = -1.8;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Y_MIN", "double", 0, "ROI_Y_MIN", "", &LidarClusteringConfig::ROI_Y_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Y_MIN", "double", 0, "ROI_Y_MIN", "", &LidarClusteringConfig::ROI_Y_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_Y_MAX = -10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_Y_MAX = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_Y_MAX = 1.8;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Y_MAX", "double", 0, "ROI_Y_MAX", "", &LidarClusteringConfig::ROI_Y_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Y_MAX", "double", 0, "ROI_Y_MAX", "", &LidarClusteringConfig::ROI_Y_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_Z_MIN = -10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_Z_MIN = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_Z_MIN = -2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Z_MIN", "double", 0, "ROI_Z_MIN", "", &LidarClusteringConfig::ROI_Z_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Z_MIN", "double", 0, "ROI_Z_MIN", "", &LidarClusteringConfig::ROI_Z_MIN)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ROI_Z_MAX = -10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ROI_Z_MAX = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ROI_Z_MAX = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Z_MAX", "double", 0, "ROI_Z_MAX", "", &LidarClusteringConfig::ROI_Z_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("ROI_Z_MAX", "double", 0, "ROI_Z_MAX", "", &LidarClusteringConfig::ROI_Z_MAX)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.VOXEL_SIZE = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.VOXEL_SIZE = 0.5;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.VOXEL_SIZE = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("VOXEL_SIZE", "double", 0, "Voxel Size", "", &LidarClusteringConfig::VOXEL_SIZE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("VOXEL_SIZE", "double", 0, "Voxel Size", "", &LidarClusteringConfig::VOXEL_SIZE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.DROR_MIN_NEIGHBORS = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.DROR_MIN_NEIGHBORS = 10;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.DROR_MIN_NEIGHBORS = 2;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("DROR_MIN_NEIGHBORS", "int", 0, "DROR min neighbors", "", &LidarClusteringConfig::DROR_MIN_NEIGHBORS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("DROR_MIN_NEIGHBORS", "int", 0, "DROR min neighbors", "", &LidarClusteringConfig::DROR_MIN_NEIGHBORS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.DROR_MIN_RADIUS = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.DROR_MIN_RADIUS = 1.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.DROR_MIN_RADIUS = 0.2;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_MIN_RADIUS", "double", 0, "DROR min radius", "", &LidarClusteringConfig::DROR_MIN_RADIUS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_MIN_RADIUS", "double", 0, "DROR min radius", "", &LidarClusteringConfig::DROR_MIN_RADIUS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.DROR_RADIUS_SCALE = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.DROR_RADIUS_SCALE = 1.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.DROR_RADIUS_SCALE = 0.4;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_RADIUS_SCALE", "double", 0, "DROR radius scale", "", &LidarClusteringConfig::DROR_RADIUS_SCALE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_RADIUS_SCALE", "double", 0, "DROR radius scale", "", &LidarClusteringConfig::DROR_RADIUS_SCALE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.DROR_MAX_RADIUS = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.DROR_MAX_RADIUS = 1.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.DROR_MAX_RADIUS = 0.3;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_MAX_RADIUS", "double", 0, "DROR max radius", "", &LidarClusteringConfig::DROR_MAX_RADIUS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("DROR_MAX_RADIUS", "double", 0, "DROR max radius", "", &LidarClusteringConfig::DROR_MAX_RADIUS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.GROUND_THRESH = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.GROUND_THRESH = 1.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.GROUND_THRESH = 0.25;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("GROUND_THRESH", "double", 0, "Ground threshold", "", &LidarClusteringConfig::GROUND_THRESH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("GROUND_THRESH", "double", 0, "Ground threshold", "", &LidarClusteringConfig::GROUND_THRESH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.EUCLIDEAN_CLUSTER_DIST = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.EUCLIDEAN_CLUSTER_DIST = 0.5;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.EUCLIDEAN_CLUSTER_DIST = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_CLUSTER_DIST", "double", 0, "클러스터링 거리", "", &LidarClusteringConfig::EUCLIDEAN_CLUSTER_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_CLUSTER_DIST", "double", 0, "클러스터링 거리", "", &LidarClusteringConfig::EUCLIDEAN_CLUSTER_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.EUCLIDEAN_MIN_CLUSTER_SIZE = 1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.EUCLIDEAN_MIN_CLUSTER_SIZE = 20;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.EUCLIDEAN_MIN_CLUSTER_SIZE = 4;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("EUCLIDEAN_MIN_CLUSTER_SIZE", "int", 0, "최소 클러스터 크기", "", &LidarClusteringConfig::EUCLIDEAN_MIN_CLUSTER_SIZE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("EUCLIDEAN_MIN_CLUSTER_SIZE", "int", 0, "최소 클러스터 크기", "", &LidarClusteringConfig::EUCLIDEAN_MIN_CLUSTER_SIZE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.CLUSTER_MERGE_GAP = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.CLUSTER_MERGE_GAP = 0.5;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.CLUSTER_MERGE_GAP = 0.05;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("CLUSTER_MERGE_GAP", "double", 0, "클러스터 병합 gap", "", &LidarClusteringConfig::CLUSTER_MERGE_GAP)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("CLUSTER_MERGE_GAP", "double", 0, "클러스터 병합 gap", "", &LidarClusteringConfig::CLUSTER_MERGE_GAP)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MAX_LENGTH = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MAX_LENGTH = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MAX_LENGTH = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_LENGTH", "double", 0, "최대 길이", "", &LidarClusteringConfig::MAX_LENGTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_LENGTH", "double", 0, "최대 길이", "", &LidarClusteringConfig::MAX_LENGTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MAX_WIDTH = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MAX_WIDTH = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MAX_WIDTH = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_WIDTH", "double", 0, "최대 폭", "", &LidarClusteringConfig::MAX_WIDTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_WIDTH", "double", 0, "최대 폭", "", &LidarClusteringConfig::MAX_WIDTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MAX_HEIGHT = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MAX_HEIGHT = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MAX_HEIGHT = 1.5;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_HEIGHT", "double", 0, "최대 높이", "", &LidarClusteringConfig::MAX_HEIGHT)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MAX_HEIGHT", "double", 0, "최대 높이", "", &LidarClusteringConfig::MAX_HEIGHT)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MIN_LENGTH = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MIN_LENGTH = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MIN_LENGTH = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_LENGTH", "double", 0, "최소 길이", "", &LidarClusteringConfig::MIN_LENGTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_LENGTH", "double", 0, "최소 길이", "", &LidarClusteringConfig::MIN_LENGTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MIN_WIDTH = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MIN_WIDTH = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MIN_WIDTH = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_WIDTH", "double", 0, "최소 폭", "", &LidarClusteringConfig::MIN_WIDTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_WIDTH", "double", 0, "최소 폭", "", &LidarClusteringConfig::MIN_WIDTH)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MIN_HEIGHT = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MIN_HEIGHT = 2.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MIN_HEIGHT = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_HEIGHT", "double", 0, "최소 높이", "", &LidarClusteringConfig::MIN_HEIGHT)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MIN_HEIGHT", "double", 0, "최소 높이", "", &LidarClusteringConfig::MIN_HEIGHT)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.TRACKER_MAX_MISS = 0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.TRACKER_MAX_MISS = 10;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.TRACKER_MAX_MISS = 2;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("TRACKER_MAX_MISS", "int", 0, "트래커 최대 miss", "", &LidarClusteringConfig::TRACKER_MAX_MISS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<int>("TRACKER_MAX_MISS", "int", 0, "트래커 최대 miss", "", &LidarClusteringConfig::TRACKER_MAX_MISS)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.MATCH_DIST = 0.1;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.MATCH_DIST = 10.0;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.MATCH_DIST = 1.5;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MATCH_DIST", "double", 0, "트래커 매칭 거리", "", &LidarClusteringConfig::MATCH_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("MATCH_DIST", "double", 0, "트래커 매칭 거리", "", &LidarClusteringConfig::MATCH_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.EUCLIDEAN_BASE_DIST = 0.01;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.EUCLIDEAN_BASE_DIST = 0.3;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.EUCLIDEAN_BASE_DIST = 0.08;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_BASE_DIST", "double", 0, "기본 클러스터 거리", "", &LidarClusteringConfig::EUCLIDEAN_BASE_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_BASE_DIST", "double", 0, "기본 클러스터 거리", "", &LidarClusteringConfig::EUCLIDEAN_BASE_DIST)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.EUCLIDEAN_DIST_SCALE = 0.001;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.EUCLIDEAN_DIST_SCALE = 0.05;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.EUCLIDEAN_DIST_SCALE = 0.012;
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_DIST_SCALE", "double", 0, "거리 증가당 threshold", "", &LidarClusteringConfig::EUCLIDEAN_DIST_SCALE)));
//#line 292 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LidarClusteringConfig::AbstractParamDescriptionConstPtr(new LidarClusteringConfig::ParamDescription<double>("EUCLIDEAN_DIST_SCALE", "double", 0, "거리 증가당 threshold", "", &LidarClusteringConfig::EUCLIDEAN_DIST_SCALE)));
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 247 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(LidarClusteringConfig::AbstractGroupDescriptionConstPtr(new LidarClusteringConfig::GroupDescription<LidarClusteringConfig::DEFAULT, LidarClusteringConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<LidarClusteringConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<LidarClusteringConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<LidarClusteringConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    LidarClusteringConfig __max__;
    LidarClusteringConfig __min__;
    LidarClusteringConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const LidarClusteringConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static LidarClusteringConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &LidarClusteringConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const LidarClusteringConfig &LidarClusteringConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const LidarClusteringConfig &LidarClusteringConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const LidarClusteringConfig &LidarClusteringConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<LidarClusteringConfig::AbstractParamDescriptionConstPtr> &LidarClusteringConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<LidarClusteringConfig::AbstractGroupDescriptionConstPtr> &LidarClusteringConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const LidarClusteringConfigStatics *LidarClusteringConfig::__get_statics__()
  {
    const static LidarClusteringConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = LidarClusteringConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __LIDARCLUSTERINGRECONFIGURATOR_H__
